/*! \mainpage Library for accessing ThermalCapture GrabberUSB - A Brief Description.
*
* Introduction
* ------------
*
* This library can be used to access the ThermalCapture GrabberUSB hardware via USB.
* The resolution of the TauRawBitmaps depends on the TauCore(640x512, 336x256, 324x256, 160x128) or Vue Pro(640x512, 336x256) that is bundled with the ThermalCapture GrabberUSB.
*
* Each pixel has a resolution of 14 bit. The value is stored in an array of 16bit fields.
* For easy use the library also provides the transformation of TauRawBitmap to a TauRGBBitmap that contains 24 bit RGB values for each pixel.
*
* Compile the library libthermalgrabber.so
* ----------------------------------------
*
* Please be sure to have a working cmake installation on your system. 
* On linux systems the system's libusb is used for the usb transactions. 
* Please install libusb-dev package (for example on Ubuntu it's called libusb-1.0-dev).
* On Windows operating systems the FTDI driver is used.
* Therfor please install the driver from FTDI (if not done already). 
* It's the  D2XX driver "(http://www.ftdichip.com/Drivers/CDM/CDM21216_Setup.exe)" from the FTDI site (http://www.ftdichip.com/Drivers/D2XX.htm).
*
* To enable the use of the FTDI D2XX driver please edit the "CMakeLists.txt" in the libthermalgrabber folder. 
* There is a line "#set(USE_FTDI_LIB 1)". 
* Please remove the "#". 
* This will enable the use of FTDI lib for compiling and linking.
* QtCreator can be used to open the CMakeLists.txt file. 
*
* On Windows the Open Source QtCreator can be installed (https://info.qt.io/download-qt-for-application-development). 
* This was tested with QtCreator based on MinGW (this can be chosen in the online installer above). 
* After the compilation process the "libthermalgrabber.dll/libthermalgrabber.dll.a>" can be found in folder "libthermalgrabber/lib".
*
* The compilation under linux can be done by console. Enter the library directory of libthermalgrabber with the needed CMakeLists.txt file and use "cmake" to generate the "Makefile".
* \code
* >cmake CMakeLists.txt
* \endcode
*
* After calling "cmake" a Makefile should be generated that can be used to compile via "make"
* \code
* >make
* \endcode
*
* After this step the library "libthermalgrabber.so" should be present in "libthermalgrabber/lib" directory.
* The appropriate header file "thermalgrabber.h is present in "libthermalgrabber/inc" directory.
*
* Code example
* ------------
*
* Some short example code shows the general use. Include "thermalgrabber.h", 
* define a callback function for TauImages and put that callback function
* pointer in the constructor of ThermalGrabber.
*
* On every received image the callbackTauImage(...) is called with the
* present TauRawBitmap.
*
* The code below can be compiled this way (with adopted include and library paths):
* \code
* g++ -std=c++11 main.cpp -o main -I../libthermalgrabber/inc -L../libthermalgrabber/lib -lthermalgrabber
* \endcode
*
*
* \code{.cpp}
* #include "thermalgrabber.h"
*
* #include <stdbool.h>
* #include <cstdlib>
* #include <iostream>
* #include <chrono>
* #include <thread>
* #include <cstdint>
* #include <cstring>
*
* ThermalGrabber* tGr;
*
* class Test
* {
* public:
*     void test();
* };
*
* void callbackTauImage(TauRawBitmap& tauRawBitmap, void* caller)
* {
*     std::cout << "updateTauRawBitmap -> w/h: " << tauRawBitmap.width << "/" << tauRawBitmap.height << " min/max: " << tauRawBitmap.min << "/" << tauRawBitmap.max << std::endl;
* }
* 
* void Test::test()
* {
*     std::cout << "Test" << std::endl;
*     tGr = new ThermalGrabber(callbackTauImage, this);
*
*     unsigned int mWidth = tGr->getResolutionWidth();
*     unsigned int mHeight = tGr->getResolutionHeight();
*     std::cout << "Resolution w/h " << mWidth << "/" << mHeight << std::endl;
*
*     // enable TLinear in high resolution on TauCores
*     //tGr->enableTLinearHighResolution();
* 
*     // run demo for 20 seconds
*     std::this_thread::sleep_for(std::chrono::milliseconds(20000)); 
*     delete tGr;
* }
* int main()
* {
*     std::cout << "main:" << std::endl;
*     {
*         Test* t = new Test();
*         t->test();
*         delete t;
*     }
*     return 0;
* }
* \endcode
*
* Executing the example code
* --------------------------
*
* Keep in mind to put the library folder path to system "$PATH" or deploy the "libthermalgrabber.so" in a library folder of the operating system that is defined in "$PATH" . Then it's executable by:
* \code
* ./main
* \endcode
*
* Otherwise you've to call the executable with preloading the lib:
* \code
* LD_PRELOAD=../libthermalgrabber/lib/libthermalgrabber.so ./main 
* \endcode
*/
